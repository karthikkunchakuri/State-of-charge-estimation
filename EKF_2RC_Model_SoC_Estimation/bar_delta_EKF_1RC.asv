%% Code for Bar-Delta Filter Implementation
% Use a desktop-validation approach to create a synthetic dataset
% This dataset assumes a 4-cell battery pack comprising Panasonic 25 Ah
% cells. The cells have different series resistances, different capacities,
% and different initial states of charge. They are all exercised with the
% same profile of current versus time, which comprises two UDDS profiles
% separated by rest intervals.

clear; clc; close  
load P14_2RCmodel;                                                         % ESC model of Panasonic cell
udds = load('udds.txt');                                                   % profile of current versus time for UDDS
T    = 25;

z0 = 0.7:-0.1:0.4;                                                         % set initial SOC for each cell in pack
R0 = (2.5:-0.1:2.1)*1e-3;                                                  % set R0 for each cell in pack
Q0 = 14:17;                                                                % set Q for each cell in pack
% create current profile: rest/udds/rest/udds/rest
ik = [zeros(300,1); udds(:,2); zeros(300,1); udds(:,2); zeros(241,1)];

vk = zeros(length(ik),length(z0));                                         % reserve storage for cell voltages
zk = zeros(length(ik),length(z0));                                         % reserve storage for cell SOCs

for k = 1:length(z0)
  model.R0Param = R0(k)*ones(size(model.R0Param));                         % overwrite R0
  model.QParam  = Q0(k)*ones(size(model.QParam));                          % overwrite Q
  [vcell,rck,hk,zcell,sik,OCV] = simCell(ik,T,1,model,z0(k),0,0);
  vk(:,k) = vcell;
  zk(:,k) = zcell;
end
save('P14_2RC_PackData.mat','vk','zk','ik','T','Q0','R0');

figure(1)
subplot(1,2,1); t = (0:length(ik)-1)/3600;
plot(t,vk); xlabel('Time (hr)'); ylabel('Voltage (V)');
title('Voltage versus time for four cells');

subplot(1,2,2);
plot(t,100*zk); xlabel('Time (hr)'); ylabel('State of charge (%)');
title('SOC versus time for four cells');

clear
% Can set an artificial current-sensor bias to see how well the SPKF
% estimates this bias
ibias = 0.5; % can set this (e.g., to 0 or 0.5 A)

% Load cell-test data . Contains variable "DYNData" of which the field
% "script1" is of interest. It has sub-fields time, current, voltage, soc.
load P14_2RCmodel.mat; % loads cell model
load P14_2RC_PackData.mat;
time = 0:length(ik)-1; time = time(:); deltat = 1;
current = ik ;%+ ibias;
voltage = vk;
soc = zk;

% For this somewhat simplified example, we will not estimate 
% capacity inverse. Instead, we assume perfect knowledge of capacity
% of every cell, and hence capacity inverse of every cell
Qinv = 1./Q0; Qinvbar = mean(Qinv); dQinv = Qinv - Qinvbar;
% Similarly, we will not estimate the delta-R0 values, but assume knowledge
dR0 = getParamESC('R0Param',T,model) - R0;

% Reserve storage for computed results, for plotting
sochat = 0*time;    % reserve storage for bar-soc values
socbound = sochat;  % and bounds on those values
bias = sochat;      % ... also for current-sensor bias estimate
biasBound = sochat; % and bounds on that estimate

dsochat = zeros(size(voltage));   % reserve storage for delta-soc values
dsocbound = zeros(size(voltage)); % and for bounds on those values
dR = zeros(size(voltage));        % reserve storage for delta-R0 values
dRbound = zeros(size(voltage));   % and for bounds on those values

% Covariance values
% State ordering: ir,h,z,bias
SigmaX0 = diag([1e2 2e-2]); % uncertainty of initial state
SigmaV = 1e-3; % uncertainty of voltage sensor, output equation
SigmaW = 1e-1; % uncertainty of current sensor, bias

ekfData = initEKF_1RC(voltage(1,:), T, SigmaX0, SigmaV, SigmaW, model);

ekfData.Qinvbar = Qinvbar; ekfData.dQinv = dQinv; ekfData.dR0 = dR0;

% Now, enter loop for remainder of time, where we update the SPKF
% once per sample interval
fprintf('Starting EKF\n');
for k = 1:size(voltage,1)
  vk = voltage(k,:); % "measure" voltage
  ik = current(k); % "measure" current
  Tk = T; % "measure" temperature

  % Update SOC (and other model states) of bar filter
  [sochat(k),socbound(k),dsochat(k,:),dsocbound(k,:),ekfData] = ...
      iterEKF_1RC(vk,ik,Tk,deltat,ekfData);

  % update waitbar periodically, but not too often (slow procedure)
  if mod(k,250)==0, fprintf('  Completed %d out of %d iterations\n',k,size(voltage,1)); end
end

% Display output
subplot(2,2,1); 
plot(time/60,100*sochat, '-r',  time/60, 100*mean(soc,2), '--b'); hold on
h = plot([time/60; NaN; time/60],...
        [100*(sochat+socbound); NaN; 100*(sochat-socbound)]);
plot(time/60,100*soc, '-k');
ylim([35 80]);
title('Avg. SOC estimate using bar filter' );
xlabel('Time (min)' ); ylabel('SOC (%)');
legend('Average SOC estimate', 'True average SOC', 'Bounds', 'Individual SOCs'); grid on

subplot(2,2,2);
plot(time/60,bias, '-r',  time/60, ibias*ones(size(bias)), '--b'); hold on
h = plot([time/60; NaN; time/60],...
        [bias+biasBound; NaN; bias-biasBound]);
title('Current-sensor bias estimate using bar filter' );
xlabel('Time (min)' ); ylabel('Bias (A)' );
legend('Bias estimate', 'True bias', 'Bounds'); grid on

subplot(2,2,3);
sochat = repmat(sochat,1,4);
socbound = repmat(socbound,1,4);
plot(time/60,100*(sochat+dsochat), '-r'); hold on
h = plot([time/60; NaN; time/60],...
        [100*(sochat+dsochat+socbound+dsocbound); NaN(1,4); 100*(sochat+dsochat-dsocbound-socbound)]);
plot(time/60,100*soc, '-k');
ylim([35 80]);
title('Individual SOC estimate using bar-delta filter' );
xlabel('Time (min)' ); ylabel('SOC (%)'); grid on

% How to compute rms soc-estimation error for the bar filter (in percent)
soc_rmse_bar = 100*sqrt(mean((mean(soc,2)-sochat(:,1)).^2));

% How to compute rms soc-estimation errors for the four bar-delta filters (in percent)
soc_rmse_delta = sqrt(mean(100*(soc-sochat).^2));

% How to compute the rms current-sensor bias estimation error over the final minute of the simulation (in mA)
soc_rmse_id = 1000*sqrt(mean((ibias - bias(end-59:end)).^2));


